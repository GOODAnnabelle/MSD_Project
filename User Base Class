class User:
    """用户基类"""
    def __init__(self, user_id, name, role):
        self.user_id = user_id
        self.name = name
        self.role = role  # 角色: admin, staff, customer
        self.is_active = True
    
    def to_dict(self):
        return {
            "user_id": self.user_id,
            "name": self.name,
            "role": self.role,
            "is_active": self.is_active
        }

class UserManager:
    """用户管理类"""
    def __init__(self):
        self.users = []
        self.load_users()
    
    def load_users(self):
        """从文件加载用户数据"""
        try:
            with open("users.json", "r", encoding="utf-8") as f:
                users_data = json.load(f)
                self.users = [User(**data) for data in users_data]
        except FileNotFoundError:
            # 初始化默认管理员用户
            admin_user = User(1, "admin", "admin")
            self.users = [admin_user]
            self.save_users()
    
    def save_users(self):
        """保存用户数据到文件"""
        with open("users.json", "w", encoding="utf-8") as f:
            users_data = [user.to_dict() for user in self.users]
            json.dump(users_data, f, ensure_ascii=False, indent=2)
    
    def add_user(self, name, role):
        """添加新用户"""
        user_id = max([user.user_id for user in self.users]) + 1 if self.users else 1
        new_user = User(user_id, name, role)
        self.users.append(new_user)
        self.save_users()
        return new_user
    
    def authenticate(self, user_id):
        """用户认证"""
        user = next((u for u in self.users if u.user_id == user_id and u.is_active), None)
        return user is not None
    
    def set_user_active(self, user_id, is_active):
        """设置用户激活状态"""
        user = next((u for u in self.users if u.user_id == user_id), None)
        if user:
            user.is_active = is_active
            self.save_users()
            return True
        return False
